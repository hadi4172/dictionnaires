Réalisé par Hadi Yahia

Il est recommandé d'installer l'extension pour navigateur Universal Bypass pour accéder aux liens raccourcis rapidement : https://universal-bypass.org/install

Installation d'une CRNA
Components
Hooks
React Navigation
Redux
Redux Persist
Animated
Passer à un projet avec du code natif
Livrer les applicaions
Librairies pour components natifs : React native Image picker....

______________________________
Installation et lancement d'une CRNA
------------------------------
// Il faut préalablement avoir installé Node.js
// Préceder toutes les commandes sur une console par *sudo* sur mac

Installer expo : npm install -g expo-cli   //dans un terminal dans le répertoire voulu
Créer une CRNA : expo init nomDuProjet  //choisir le template blank sur la console
Lancer la CRNA : npm start
Fermer expo : Ctrl + C
Rechargement sur simulateur iOS : command + R
Rechargement sur simulateur Android : Ctrl + M sur Windows et command + M sur Mac
Vérifier version des paquets installés : npm list  --depth=0

Installation React Native Paper et React Navigation ↓ 
.........................  //écrire ces 2 lignes dans un terminal
npm install --save @react-navigation/native @react-navigation/stack @react-native-community/masked-view @react-navigation/drawer @react-navigation/material-bottom-tabs react-native-paper @react-navigation/material-top-tabs
expo install react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context
.........................

______________________________
Components
------------------------------

#####
React Native Paper
Documentation complète : https://bit.ly/3ifYfeL

## Navigation ==============
BottomNavigation    https://bit.ly/3icSqyG //(C'est comme un Tabbar) permet une navigation entre les vues avec une barre de navigation inférieure. Utilisé avec React Navigation. 
Drawer              https://bit.ly/2C5pXve //(C'est un menu Hamburger) Un composant pour regrouper le contenu.

## Boutons ==============
Button              https://bit.ly/3a1vbEB //composant sur lequel l'utilisateur peut appuyer pour déclencher une action.
FAB                 https://bit.ly/2DzN0Pg //Un bouton d'action flottant. Doit être enveloppé par un composant Portal
Checkbox            https://bit.ly/3khWQWQ //permettent la sélection de plusieurs options dans un ensemble.
Switch              https://bit.ly/3a6PFMw //bascule visuelle entre deux états mutuellement exclusifs: activé et désactivé.
IconButton          https://bit.ly/30tukJM //un bouton qui affiche uniquement une icône sans étiquette. Par défaut, le bouton a une taille de 150% de l'icône.
RadioButton         https://bit.ly/30AX7fP //permettent de sélectionner une seule option dans un ensemble.
ToggleButton        https://bit.ly/39XMDdr //Un composant qui permet à l'utilisateur de choisir une option parmi un ensemble
Chip                https://bit.ly/3kfEYMb //utilisées pour afficher des entités en petits blocs.
Appbar              https://bit.ly/33Io0Ar //pour afficher des éléments d'action dans une barre. Il peut être placé en haut ou en bas. (Barre de boutons)

## Listes ==============
List                https://bit.ly/2EN4w2S //Un composant utilisé pour afficher une liste extensible.
Divider             https://bit.ly/31mzfeR //Un séparateur qui regroupe le contenu dans des listes et des mises en page.

## Typographie ==============
Text                https://bit.ly/2Ppkjag //Composant de texte qui suit les styles du thème.
Title               https://bit.ly/3a6PJfe //titre.
Subheading          https://bit.ly/3kj6Sqs //sous-titre.
Paragraph           https://bit.ly/31n3Ngz //paragraphe.
Headline            https://bit.ly/3gAoHz2 //Gros titre.
Caption             https://bit.ly/2Pteskc //légende.

## Entrée ==============
SearchBar           https://bit.ly/31mmFMO //zone de saisie simple dans laquelle les utilisateurs peuvent saisir des requêtes de recherche.
TextInput           https://bit.ly/2PsJwka //Un composant pour permettre aux utilisateurs de saisir du texte.
HelperText          https://bit.ly/3gxYyB4 //utilisé avec des éléments d'entrée pour fournir des conseils supplémentaires à l'utilisateur.

## Modals ==============
Banner              https://bit.ly/39WYMiL //affiche un message important et les actions associées.
SnackBar            https://bit.ly/2XNBaZ9 //fournis de brefs commentaires sur une opération via un message en bas de l'écran. (C'est un Toast)
Dialog              https://bit.ly/3fDUoqc //informent les utilisateurs sur une tâche spécifique. Doit être enveloppé par un composant Portal
Menu                https://bit.ly/2PuDf7G //affiche une liste de choix sur une surface surélevée temporaire. Son placement varie en fonction de l'élément qui l'ouvre.
Modal               https://bit.ly/3i8TZh1 //un moyen simple de présenter du contenu au-dessus d'une vue englobante. Doit être enveloppé par un composant Portal

## Informations ==============
Avatar              https://bit.ly/3gy5dv6 //utilisés pour représenter des personnes de manière graphique.
Badge               https://bit.ly/3ioHzBV //petits cercles descripteurs de statut pour les éléments de l'interface utilisateur.
Card                https://bit.ly/2PuC3RM //feuille qui sert à afficher des informations plus détaillées.
DataTable           https://bit.ly/3fqTkWs //permettent d'afficher des ensembles de données.

## Patienter ==============
ActivityIndicator   https://bit.ly/2XwVvSl //utilisé pour présenter la progression d'une activité
ProgressBar         https://bit.ly/3kqH4sO //indicateur utilisé pour présenter la progression de certaines activités dans l'application.

## Conteneurs ==============
Portal              https://bit.ly/31kYled //permet de rendre un composant à un endroit différent dans l'arborescence parent.
Surface             https://bit.ly/2PrydbX //Conteneur de base qui peut donner de la profondeur à un élément avec une ombre d'élévation.
TouchableRipple     https://bit.ly/3gyCXIP //Un wrapper pour les vues qui doivent répondre aux touches. Fournit un effet d'interaction matériel "ondulation d'encre"

#####
Composants React Native basiques utiles
Documentation complète : https://bit.ly/2EVub9P

View                    https://bit.ly/2XwLPXH //Conteneur fondamental équivalent au div en html // ex: <View>...</View>
KeyboardAvoidingView    https://bit.ly/3id1unc //Fournit une vue qui s'adapte quand est instancié le clavier virtuel.
SafeAreaView            https://bit.ly/2Ps8IHt //Conteneur pour les écrans iphones X et similaires
ScrollView              https://bit.ly/39Y5V2a //Conteneur qui peut accueillir plusieurs composants. Utile pour défiler des gros paragraphes
FlatList                https://bit.ly/31qwMQr //Conteneur performant pour accueillir une liste d'objets.
Memo                    https://bit.ly/2PZGbJP //Pour optimiser les components principalement dans les listes. (Comme PureComponent mais pour les fonctions)
Pressable               https://bit.ly/2E4eJYi //Conteneur pour détecter quand on appuie sur un élément enfant

AppState                https://bit.ly/2C2zuTH //peut vous dire si l'application est au premier plan ou en arrière-plan et vous avertir lorsque l'état change.
Dimensions              https://bit.ly/33uayjd //Obtenir les dimensions de l'appareil.
PixelRatio              https://bit.ly/2XzyQEV //Donne accès à la densité de pixels de l'appareil

Vibration               https://bit.ly/31mHfwp //Fait vibrer l'appareil.
Share                   https://bit.ly/3kjdOnu //Ouvre une boîte de dialogue pour partager du contenu textuel.
StatusBar               https://bit.ly/30uiajS //Contrôle de la barre d'état de l'application
RefreshControl          https://bit.ly/2PqSazs //Utilisé à l'intérieur d'un ScrollView pour ajouter une fonctionnalité de "pull to refresh".
StyleSheet              https://bit.ly/3iadBkP //Fournit une couche d'abstraction similaire aux feuilles de style CSS

Image                   https://bit.ly/30KxhWA

## Librairie alternatives ==============
yarn                    npm install yarn --global
Nativebase.io           https://bit.ly/3hnuNTT
RN Elements             https://bit.ly/2QfzUtt
Easy grid               https://bit.ly/3aepvr4  //import { Col, Row, Grid } from "react-native-easy-grid"; //npm install react-native-easy-grid --save
Fast Image              https://bit.ly/3akzDie  //import FastImage from 'react-native-fast-image';         // yarn add react-native-fast-image    
Bottom Sheet            https://bit.ly/3hoeMwU  //Page venant par en bas
Swipeable panel         https://bityl.co/4u1S   //Autre libraire pour page venant par le bas
Date/Time Picker        https://bityl.co/3HnO
React Native Swipeable  https://bityl.co/4u1G   //Pour glisser des components

______________________________
Divers
------------------------------
## Props
Lorsqu'on ne passe pas un props , il est évalué à undefined lors du chargement du component
Si on le passe sans argument, il est évalué à true

## Syntaxe générale
import : https://bityl.co/4zzK
export : https://bityl.co/4zzM
______________________________
Hooks
------------------------------

###
Hooks d'états :       //comme une variable normale mais qui recharge le component lors d'une modification
Importer useState : import React, { useState } from 'react';
Déclarer une variable de state : let [maVariable, setMaVariable] = useState(valeurInitiale);   //useState renvoie un tableau de 2 élements //il est possible de déclarer plusieurs variables
Lire l'état : ex: <p>Vous avez cliqué {maVariable} fois</p>
Mettre à jour l’état : setMaVariable(nouvelleValeur);

###
Hooks d'éffets :        //fonctionnement proche d'un action listener qui se déclenche au lancement premier d'un component, lors d'une modification, ou lors du déchargement
Importer useEffect : import React, { useEffect } from 'react';
// useEffect est une combinaison de componentDidMount, componentDidUpdate, et componentWillUnmount
Implémenter useEffect : useEffect(() => { /* code */ });    //fonctionne comme componentDidMount + componentDidUpdate, retourner une fonction pour nettoyer (componentWillUnmount)
Implémenter useEffect avec seulement componentDidMount : useEffect(() => { /* code */ }, []);   // le deuxième argument sert a définir par rapport à quelles variables l'effect doit réagir au changment
Implémenter useEffect en séparant les cycles de vie ↓
.........................  //nécessite d'importer useRef
const mounted = useRef();
useEffect(() => {
  if (!mounted.current) {
    // do componentDidMount logic
    mounted.current = true;
  } else {
    // do componentDidUpdate logic
  }
  /* //Facultativement 
  return function cleanup() {
    // do componentWillUnmount logic
  };
  */
});
.........................

useEffect pour fonction asynchrone ↓
.........................
useEffect(() => {
  let isMounted = true; // note this flag denote mount status
  someAsyncOperation().then(data => {
    if (isMounted) setState(data);
  })
  return () => { isMounted = false }; // use effect cleanup to set flag false, if unmounted
});
.........................
componentDidMount() est appelée après que le Component a été dessiné (render) sur l'interface pour la première fois.
componentDidUpdate() est appelée après que le Component aie été redéssiné suite à la mise à jour du state
componentWillUnmount() est appelée lorsque le Component est sur le point d'être retiré du DOM.

###
Hooks de Réference :
// Utile pour garder une réference à un certain objet du DOM JSX
Documentation : https://bityl.co/4uDv

###
Hooks de Contexte :
Documentation : https://bit.ly/30wmY8p  et https://bit.ly/31XKVVE
// Dans le parent : 
Importer createContext : import React, { createContext } from 'react';
Sauvegarder variable voulue dans le contexte : let MonContexte = createContext(maVariableSauvegardée);
Envelopper les enfants avec une paire de balise Provider : ex. <MonContexte.Provider> <ComposantEnfant1/> </MonContexte.Provider> //Composant1 et ses enfants auront accès à maVariableSauvegardée
Exporter MonContexte
// Dans l'enfant ou plus bas : 
Importer useContext de React
Importer MonContexte du fichier du composant parent
Accéder à maVariableSauvegardée : useContext(MonContexte);  //retourne maVariableSauvegardée sous sont état actuel
______________________________
React Navigation v.5
------------------------------
// Exemple d'intégration de React Navigation 5 à Paper : https://bit.ly/3kaRAEp

###
Installation
Package à installer : npm install --save @react-navigation/native @react-navigation/stack @react-navigation/drawer @react-navigation/bottom-tabs
Installation de dépendances dans un projet géré par Expo : expo install react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context @react-native-community/masked-view
Installation de dépendances dans un projet React Native complet ↓
.........................
npm install --save react-native-reanimated react-native-gesture-handler react-native-screens react-native-safe-area-context @react-native-community/masked-view
// si nous sommes sur Mac, installer maintenant les pods via Cocoapods avec la commande : npx pod-install ios
Ajouter cette ligne au plus haut (ligne 1) du fichier d'entrée (App.js ou index.js) : import 'react-native-gesture-handler';
Ajouter cette ligne vers le haut du fichier d'entrée : import { NavigationContainer } from '@react-navigation/native';
Encapsuler toute l'application dans cette balise : <NavigationContainer></NavigationContainer>
.........................

#####
Navigateur de pile (StackNavigator)
Importer StackNavigator : import { createStackNavigator } from '@react-navigation/stack';  //se met vers le haut du fichier d'entrée
//un StackNavigator contient un sous objet Navigator et un autre sous-objet screen, Navigator doit être dans le NavigationContainer et il contient lui même les screens.
Exemple d'implémentation dans le fichier d'entrée ↓
.........................
const Stack = createStackNavigator();
function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator initialRouteName="Home">         //Ajouter le prop initialRouteName pour définir quel écran est le premier et le prop screenOptions pour des options sur tous les screens
        <Stack.Screen name="Home" component={HomeScreen} />             //le prop component accepte seulement un composant, pas une fonction de rendu.
        <Stack.Screen name="Details" component={DetailsScreen} />       //les props name et component sont obligatoires
      </Stack.Navigator>
    </NavigationContainer>
  );
}
.........................
Personaliser un écran : <Stack.Screen name="Home" component={HomeScreen} options={{ title: 'Overview' }}/>   //change le titre d'en tête à "Overview" //liste complète d'options: https://bit.ly/31vsJlY
Naviguer vers un autre écran ↓
......................... //Dans le component de l'un de nos écrans
import { NavigationContainer } from '@react-navigation/native';
function HomeScreen({ navigation }) {     //Chaque screen dans un StackNavigator est fourni de la prop
  return (
    <View>
      <Button
        title="Go to Details"
        onPress={() => navigation.navigate('Details')}      //mettre le nom de l'écran voulu dans navigation.navigate(), ce dernier doit aussi être dans le StackNavigator
      />
    </View>
  );
}
.........................
Créer une nouvelle instance d'un écran : navigation.push('Details');   //utile pour avoir plusieurs fois le même écran
Revenir au précédent écran : navigation.goBack();     //navigate agit aussi comme goBack si l'écran existe déja
Revenir au premier écran de la pile : navigation.popToTop();

## Passage de paramètres ==============
Donner un paramètre inital à un écran : <Stack.Screen name="Details" component={DetailsScreen} initialParams={{ itemId: 42 }} /> //L'écran aura ces params de base. Les params sont fusionnés quand il en reçoit d'autres écrans.
Passer des paramètres entre les écrans ↓
.........................
    //Dans l'écran donneur appeler navigate avec un deuxième paramètre, comme cela :  navigation.navigate('RouteName', { /* params go here */ });
    //Dans l'écran receveur, lire avec route.params 
    //Exemple :
// Écran donneur
function HomeScreen({ navigation }) {
  return (
      <View>
        <Button title="Go to Details" onPress={() => {
            navigation.navigate('Details', {itemId: 86, otherParam: 'uneValeur'});
        }}
        />
      </View>
  );
}
// Écran receveur
function DetailsScreen({ route, navigation }) {
  const { itemId } = route.params;
  const { otherParam } = route.params;
  return (
    <View>
      <Text>itemId: {JSON.stringify(itemId)}</Text>
      <Text>otherParam: {JSON.stringify(otherParam)}</Text>
    </View>
  );
}
.........................

Autre façon de passer des paramètres, mais non-recommandé car moin performant que la méthode plus haut avec initialParams :
.........................
//à partir du navigateur
<Stack.Screen name="Home">
  {props => <HomeScreen {...props} extraData={someData:32} />}
</Stack.Screen>

//à partir du Screen
function HomeScreen(props) {
    return (
        <View>
            <Button onPress={() => console.log(props.someData)}>
            </Button>
        </View >
    );
}
.........................

Passage de paramètres avec des navigateurs imbriqués ↓ 
.........................
// supposons que l'on a un navigateur à l'intérieur de l'Écran1
navigation.navigate('Écran1', {
  screen: 'Écran2',
  params: { user: 'jane' },
});
.........................

## Modifier en-tête de l'écran ==============
Mettre à jour le titre d'en-tête d'un écran : navigation.setOptions({ title: 'nouveauTitre' })}   //dans le component de l'écran
Remplacer le titre d'en-tête d'un écran par un élément graphique : https://bit.ly/2Xy2lac
Modifier le style de l'en-tête d'un écran : https://bit.ly/2EYs1Gu  //un peu plus bas dans la page web pour tous les écrans

## Navigateurs imbriqués ==============
Voir https://bit.ly/3gF3uEg

#####
Navigateur par onglets (Tab Navigation)
Importer Tab Navigation : import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
Exemple d'implémentation dans le fichier d'entrée ↓
.........................
const Tab = createBottomTabNavigator();
export default function App() {
  return (
    <NavigationContainer>
      <Tab.Navigator>
        <Tab.Screen name="Home" component={HomeScreen} />
        <Tab.Screen name="Settings" component={SettingsScreen} />
      </Tab.Navigator>
    </NavigationContainer>
  );
}
.........................
Modifier le style : https://bit.ly/33zeaAI
Ajouter un badge aux onglets : <Tab.Screen name="Home" component={HomeScreen} options={{ tabBarBadge: 3 }} />     //utiliser Redux pour transmettre la valeur du badge depuis un autre endroit
Sauter vers un onglet à partir d'un autre avec la programmation : navigation.navigate();
Exemple d'implémentation de StackNavigators dans des TabNavigators : https://bit.ly/2XAjkZb
Cacher le Tab Navigator dans un écran spécifique :  https://bit.ly/30zt7kr

#####
Navigateur par tiroir (Drawer Navigation)
Importer un DrawerNavigator : import { createDrawerNavigator } from '@react-navigation/drawer'
Exemple d'implémentation dans le fichier d'entrée ↓
.........................
const Drawer = createDrawerNavigator();
export default function App() {
  return (
    <NavigationContainer>
      <Drawer.Navigator initialRouteName="Home">
        <Drawer.Screen name="Home" component={HomeScreen} />
        <Drawer.Screen name="Notifications" component={NotificationsScreen} />
      </Drawer.Navigator>
    </NavigationContainer>
  );
}
.........................
Ouvrir le tiroir avec la programmation : navigation.openDrawer();
Fermer le tiroir avec la programmation : navigation.closeDrawer();
Basculer le tiroir en ouvert/fermé avec la programmation : navigation.toggleDrawer();
Déterminer si le tiroir est ouvert ou fermé : useIsDrawerOpen();  //retourne un booleen // il faut en premier import { useIsDrawerOpen } from '@react-navigation/drawer';

#####
Zone sure (SafeArea)
Ne pas utiliser le SafeAreaView Basique de React Native. Plutôt suivre les instructions ici : https://bityl.co/4thc

#####
Autre
TopTabNavigation : https://bit.ly/3kyhXo0
Empêcher de revenir en arrière : https://bit.ly/3gNvwxD

#####
Libraires de navigation alternatives
React native Swiper : https://bityl.co/4u0y  npm i --save react-native-swiper@next  import Swiper from 'react-native-swiper'

______________________________
Redux v.7
------------------------------
Étapes pour ajouter Redux à un Projet React :
1. Installer Redux : npm install --save redux react-redux @reduxjs/toolkit
2. Créer un store Redux en utilisant configureStore de Redux toolkit et lui passer au moin un reducer
3. Importer le store dans le fichier d'entrée
4. Encapsuler le component du fichier d'entrée dans un component Provider
5. Accéder au store dans les components avec useSelector (lecture) et useDispatch (écriture)

Redux s'attend à ce que toutes les mises à jour d'état soient effectuées de manière immuable ; il faut cloner l'objet et modifier son clone.

Une action est un objet qui décrit quelque chose qui s'est produit dans l'application. Il a obligatoirement une clé 'type'
Un créateur d'action est une fonction qui retourne une action. Exemple ↓
.........................
const addTodo = (text) => {
  return {
    type: 'todos/todoAdded',        //on écrit le type dans ce format en général : "domaine/nomEvenement"
    payload: text                   //Pour des informations supplémentaires sur ce qui s'est passé, on utilise par convention un champ payload
  }
}
.........................

Un reducer est une fonction qui reçoit le state actuel et une action, et retourne un nouveau state en fonction de l'action.
Exemple de reducer ↓
.........................
const initialState = { value: 0 };
function counterReducer(state = initialState, action) {
  if (action.type === 'counter/increment') {                // Vérifier si le réducer se soucie de cette action
    return {                                                // Si oui, retourner une copie du state mis à jour avec la nouvelle valeur
      ...state,
      value: state.value + 1
    };
  }
  return state;                                              // sinon rendre le state existant inchangé
}

//Autre exemple plus moderne avec React Toolkit......................................
import { createSlice } from '@reduxjs/toolkit'
export const counterSlice = createSlice({
  name: 'counter',
  initialState: {
    value: 0
  },
  reducers: {
    increment: state => {       //Nous n'avons pas besoin de l'action ici donc on peut ne pas le déclarer dans ce reducer
      state.value += 1          //createSlice nous permet d'utiliser cette syntaxe, mais il faut savoir que ce state là est un clone.
    },
    decrement: state => {
      state.value -= 1
    },
    incrementByAmount: (state, action) => {
      state.value += action.payload
    }
  }
})
export const { increment, decrement, incrementByAmount } = counterSlice.actions
export default counterSlice.reducer
.........................

Le store est créé en transmettant un reducer, et possède une méthode appelée getState qui renvoie la valeur du state actuel. Exemple ↓
.........................
import counterReducer from "l'endroit où nous avons exporté counterSlice.reducer plus haut"
...
import { configureStore } from '@reduxjs/toolkit'
const store = configureStore({
    reducer: {         
        counter: counterReducer,
        users: usersReducer,
        posts: postsReducer
    }
});
console.log(store.getState());              // {value: 0}
.........................

Dispatch est une méthode du store qui prends en argument une action (ou un créateur d'actions) et qui lance le reducer du store pour mettre à jour le state global. Exemple : store.dispatch({ type: 'counter/increment' });
en utilisant createSlice : nous pouvons utiliser dispatch de cette manière : store.dispatch(counterSlice.actions.increment());   //même chose que store.dispatch({type: "counter/increment"});

getState est une méthode du store pour obtenir le state global.

Les sélécteurs sont des fonctions servant à extraire une clé spécifique du state. Exemple ↓
.........................
const selectCounterValue = state => state.value;
const currentValue = selectCounterValue(store.getState());     //currentValue = 0  
.........................

Dans un fichier de component, nous ne pouvons pas importer le store, donc pour utiliser dispatch et les sélécteurs, nous utilsons des hooks Redux :
tout d'abord : import { useSelector, useDispatch } from 'react-redux'

Hook useSelector :
const count = useSelector(state => state.counter.value);       //équivaut à const count = selectCount(store.getState()); où const selectCount = state => state.counter.value;
Chaque fois qu'une action a été envoyée avec dispatch et que le store Redux a été mis à jour, useSelector relancera notre fonction de sélection.

Hook useDispatch :
const dispatch = useDispatch();   //au début du fichier 
dispatch(increment());            //dans un bouton, par exemple   (où increment est une variable définie comme counterSlice.actions.increment, qui vaut {type: "counter/increment"})
// ↑ équivaut à store.dispatch(increment());

Pour que les hooks puissent accéder au store, il faut encapsuler le component du fichier d'entrée dans un component Provider. Exemple ↓
.........................
import React from 'react'
import ReactDOM from 'react-dom'
import App from './App'
import store from './app/store'
import { Provider } from 'react-redux'

ReactDOM.render(
  <Provider store={store}>     //Tout ce qui est à l'interieur du Provider a accès au store Redux
    <App />
  </Provider>,
  document.getElementById('root')
)
.........................

Réference supplémentaires : 
https://redux.js.org/tutorials/essentials/part-1-overview-concepts        //Documentation officielle
https://www.taniarascia.com/redux-react-guide/                            //Explication de l'essentiel rapidement
https://react-redux.js.org/introduction/basic-tutorial
https://openclassrooms.com/fr/courses/4902061-developpez-une-application-mobile-react-native/5046316-integrez-redux-dans-votre-application
https://daveceddia.com/redux-tutorial/

______________________________
Redux Persist v.6
------------------------------
Installation : npm install --save redux-persist

Dans le fichier d'entrée ↓
.........................
import { PersistGate } from 'redux-persist/integration/react'
//et mettre la paire de balise PersistGate juste en bas du Provider, comme ceci :
const App = () => {
  return (
    <Provider store={store}>
      <PersistGate loading={<LoadingView />} persistor={persistor}>       //loading peut aussi être mis à null   //persistor est importé du fichier du store Redux
        <RootComponent />
      </PersistGate>
    </Provider>
  );
};
.........................

Dans le fichier du store Redux ↓
.........................
//Ajouter 
import { persistStore, persistReducer } from 'redux-persist'
import storage from 'redux-persist/lib/storage'
import AsyncStorage from '@react-native-community/async-storage';

const persistConfig = {
  key: 'root',
  storage: AsyncStorage,
}

const persistedReducer = persistReducer(persistConfig, rootReducer);

export const store = configureStore(persistedReducer);      //ou createStore si on n'utilise pas Redux Toolkit
export const persistor = persistStore(store);
.........................

###
Listes noire et listes blanches
Utiliser pour ne pas persister une partie du state ou pour seulement persister cette partie. Exemple ↓
.........................
// BLACKLIST
const persistConfig = {
  key: 'root',
  storage: storage,
  blacklist: ['navigation'] // navigation ne sera pas persisté  //navigation est le nom de l'un de nos reducers dans combineReducers
};

// WHITELIST
const persistConfig = {
  key: 'root',
  storage: storage,
  whitelist: ['navigation'] // seul navigation sera persisté
};
.........................

Persistances imbriquées : voir https://bit.ly/30BIrN9 et https://bit.ly/2Pz48XZ

Références : https://bit.ly/3fEv2rZ et https://bit.ly/2Pz48XZ

______________________________
Passer à un projet avec du code natif
------------------------------
Cette étape est irréversible.  (Je pense qu'on peut quand même revenir avec git)
Le serveur node.js doit être arrêté
Taper les commandes ↓
.........................
npm install --save -g react-native-cli
expo eject
.........................
À la première question posé au terminal, répondre "React Native"
Puis, entrer le nom de l'application
Puis, entrer le nom de l'applciation sans espaces (nom des projets Android Studio et XCode)
Ça y est, notre application a été éjectée. Elle est passée d'une CRNA à une application React Native avec du code natif. 
Préparer le terrain sur iOS     : https://bit.ly/2XB1up2
Préparer le terrain sur Android : https://bit.ly/2XCMR4s
Taper les commandes ↓
.........................
npm install --save react-native-gesture-handler
react-native link
.........................
Créer un fichier index.js à la racine de notre projet et ajouter le code ↓
.........................
import { AppRegistry } from 'react-native';
import App from './App';
AppRegistry.registerComponent('MoviesAndMe', () => App);
.........................

Maintenant, pour lancer notre projet react native, taper sur le terminal :
pour iOS : react-native run-ios             // un simulateur va être lancé et va afficher notre application.
pour Android : react-native run-android     //il faut soit lancer un émulateur soi-même au préalable, soit brancher notre appareil via USB.

Si on rencontre un problème : voir https://bit.ly/3gRqobP

______________________________
Livrer les applications
------------------------------
###
Pour une CRNA : https://bit.ly/2XG99T5     //on pourra directement passer aux dernières lignes dans les 2 sections plus bas

###
Sur App store
Vérifier que nos urls appelés dans l'application passent par https, sinon autorier les appels vers http avec https://bit.ly/2DvBtAI
Passer en mode release : https://bit.ly/2F4DnZB
Exécuter cette commande à la racine du projet ↓  //nos images doivent au préalable être dans une dossier "assets" 
react-native bundle --entry-file ./index.js --platform ios --dev false --bundle-output ./ios/MoviesAndMe/main.jsbundle --assets-dest ./ios/
Utiliser le bundle Javascript : https://bit.ly/3knbk7K
Envoyer mon application au App store : https://bit.ly/33BjELe

###
Sur Google Play
Configuration sur android : https://bit.ly/3iiyM4g
Envoyer mon application au Google Play : https://bit.ly/33CBayB

______________________________
Autre
------------------------------
Intégrer React Native dans une application native existante : https://bit.ly/33JYSt3
VS App Center : https://bit.ly/3ip5DUT