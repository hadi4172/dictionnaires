
Installation d'une CRNA
Components
Hooks
React Navigation
Redux
Redux Persist
Animated
Passer à un projet avec du code natif
Livrer les applicaions
Librairies pour components natifs : React native Image picker....

______________________________
Installation et lancement d'une CRNA
------------------------------
// Il faut préalablement avoir installé Node.js
// Préceder toutes les commandes sur une console par *sudo* sur mac

Installer expo : npm install -g expo-cli   //dans un terminal dans le répertoire voulu
Créer une CRNA : expo init nomDuProjet  //choisir le template blank sur la console
Lancer la CRNA : npm start
Rechargement sur simulateur iOS : command + R
Rechargement sur simulateur Android : Ctrl + M sur Windows et command + M sur Mac

Installation React Native Paper et React Navigation ↓ 
.........................  //écrire ces 2 lignes dans un terminal
npm install @react-navigation/native @react-navigation/stack @react-native-community/masked-view @react-navigation/drawer @react-navigation/material-bottom-tabs react-native-paper
expo install react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context
.........................

______________________________
Components
------------------------------

#####
React Native Paper
Documentation complète : https://bit.ly/3ifYfeL

## Navigation ==============
BottomNavigation    https://bit.ly/3icSqyG //(C'est comme un Tabbar) permet une navigation entre les vues avec une barre de navigation inférieure. Utilisé avec React Navigation. 
Drawer              https://bit.ly/2C5pXve //(C'est un menu Hamburger) Un composant pour regrouper le contenu.

## Boutons ==============
Button              https://bit.ly/3a1vbEB //composant sur lequel l'utilisateur peut appuyer pour déclencher une action.
FAB                 https://bit.ly/2DzN0Pg //Un bouton d'action flottant. Doit être enveloppé par un composant Portal
Checkbox            https://bit.ly/3khWQWQ //permettent la sélection de plusieurs options dans un ensemble.
Switch              https://bit.ly/3a6PFMw //bascule visuelle entre deux états mutuellement exclusifs: activé et désactivé.
IconButton          https://bit.ly/30tukJM //un bouton qui affiche uniquement une icône sans étiquette. Par défaut, le bouton a une taille de 150% de l'icône.
RadioButton         https://bit.ly/30AX7fP //permettent de sélectionner une seule option dans un ensemble.
ToggleButton        https://bit.ly/39XMDdr //Un composant qui permet à l'utilisateur de choisir une option parmi un ensemble
Chip                https://bit.ly/3kfEYMb //utilisées pour afficher des entités en petits blocs.
Appbar              https://bit.ly/33Io0Ar //pour afficher des éléments d'action dans une barre. Il peut être placé en haut ou en bas. (Barre de boutons)

## Listes ==============
List                https://bit.ly/2EN4w2S //Un composant utilisé pour afficher une liste extensible.
Divider             https://bit.ly/31mzfeR //Un séparateur qui regroupe le contenu dans des listes et des mises en page.

## Typographie ==============
Text                https://bit.ly/2Ppkjag //Composant de texte qui suit les styles du thème.
Title               https://bit.ly/3a6PJfe //titre.
Subheading          https://bit.ly/3kj6Sqs //sous-titre.
Paragraph           https://bit.ly/31n3Ngz //paragraphe.
Headline            https://bit.ly/3gAoHz2 //Gros titre.
Caption             https://bit.ly/2Pteskc //légende.

## Entrée ==============
SearchBar           https://bit.ly/31mmFMO //zone de saisie simple dans laquelle les utilisateurs peuvent saisir des requêtes de recherche.
TextInput           https://bit.ly/2PsJwka //Un composant pour permettre aux utilisateurs de saisir du texte.
HelperText          https://bit.ly/3gxYyB4 //utilisé avec des éléments d'entrée pour fournir des conseils supplémentaires à l'utilisateur.

## Modals ==============
Banner              https://bit.ly/39WYMiL //affiche un message important et les actions associées.
SnackBar            https://bit.ly/2XNBaZ9 //fournis de brefs commentaires sur une opération via un message en bas de l'écran. (C'est un Toast)
Dialog              https://bit.ly/3fDUoqc //informent les utilisateurs sur une tâche spécifique. Doit être enveloppé par un composant Portal
Menu                https://bit.ly/2PuDf7G //affiche une liste de choix sur une surface surélevée temporaire. Son placement varie en fonction de l'élément qui l'ouvre.
Modal               https://bit.ly/3i8TZh1 //un moyen simple de présenter du contenu au-dessus d'une vue englobante. Doit être enveloppé par un composant Portal

## Informations ==============
Avatar              https://bit.ly/3gy5dv6 //utilisés pour représenter des personnes de manière graphique.
Badge               https://bit.ly/3ioHzBV //petits cercles descripteurs de statut pour les éléments de l'interface utilisateur.
Card                https://bit.ly/2PuC3RM //feuille qui sert à afficher des informations plus détaillées.
DataTable           https://bit.ly/3fqTkWs //permettent d'afficher des ensembles de données.

## Patienter ==============
ActivityIndicator   https://bit.ly/2XwVvSl //utilisé pour présenter la progression d'une activité
ProgressBar         https://bit.ly/3kqH4sO //indicateur utilisé pour présenter la progression de certaines activités dans l'application.

## Conteneurs ==============
Portal              https://bit.ly/31kYled //permet de rendre un composant à un endroit différent dans l'arborescence parent.
Surface             https://bit.ly/2PrydbX //Conteneur de base qui peut donner de la profondeur à un élément avec une ombre d'élévation.
TouchableRipple     https://bit.ly/3gyCXIP //Un wrapper pour les vues qui doivent répondre aux touches. Fournit un effet d'interaction matériel "ondulation d'encre"

#####
Composants React Native basiques utiles
Documentation complète : https://bit.ly/2EVub9P

View                    https://bit.ly/2XwLPXH //Conteneur fondamental équivalent au div en html // ex: <View>...</View>
KeyboardAvoidingView    https://bit.ly/3id1unc //Fournit une vue qui s'adapte quand est instancié le clavier virtuel.
SafeAreaView            https://bit.ly/2Ps8IHt //Conteneur pour les écrans iphones X et similaires
ScrollView              https://bit.ly/39Y5V2a //Conteneur qui peut accueillir plusieurs composants. Utile pour défiler des gros paragraphes
FlatList                https://bit.ly/31qwMQr //Conteneur performant pour accueillir une liste d'objets.

AppState                https://bit.ly/2C2zuTH //peut vous dire si l'application est au premier plan ou en arrière-plan et vous avertir lorsque l'état change.
Dimensions              https://bit.ly/33uayjd //Obtenir les dimensions de l'appareil.
PixelRatio              https://bit.ly/2XzyQEV //Donne accès à la densité de pixels de l'appareil

Vibration               https://bit.ly/31mHfwp //Fait vibrer l'appareil.
Share                   https://bit.ly/3kjdOnu //Ouvre une boîte de dialogue pour partager du contenu textuel.
StatusBar               https://bit.ly/30uiajS //Contrôle de la barre d'état de l'application
RefreshControl          https://bit.ly/2PqSazs //Utilisé à l'intérieur d'un ScrollView pour ajouter une fonctionnalité de "pull to refresh".
StyleSheet              https://bit.ly/3iadBkP //Fournit une couche d'abstraction similaire aux feuilles de style CSS

______________________________
Hooks
------------------------------

###
Hooks d'états :
Importer useState : import React, { useState } from 'react';
Déclarer une variable de state : let [maVariable, setMaVariable] = useState(valeurInitiale);   //useState renvoie un tableau de 2 élements //il est possible de déclarer plusieurs variables
Lire l'état : ex: <p>Vous avez cliqué {maVariable} fois</p>
Mettre à jour l’état : setMaVariable(nouvelleValeur);

###
Hooks d'éffets :
Importer useEffect : import React, { useEffect } from 'react';
// useEffect est une combinaison de componentDidMount, componentDidUpdate, et componentWillUnmount
Implémenter useEffect : useEffect(() => { /* code */ });    //fonctionne comme componentDidMount + componentDidUpdate, retourner une fonction pour nettoyer (componentWillUnmount)
Implémenter useEffect avec seulement componentDidMount : useEffect(() => { /* code */ }, []);
Implémenter useEffect en séparant les cycles de vie ↓
.........................  //nécessite d'importer useRef
const mounted = useRef();
useEffect(() => {
  if (!mounted.current) {
    // do componentDidMount logic
    mounted.current = true;
  } else {
    // do componentDidUpdate logic
  }
  /* //Facultativement 
  return function cleanup() {
    // do componentWillUnmount logic
  };
  */
});
.........................
componentDidMount() est appelée après que le Component a été dessiné (render) sur l'interface pour la première fois.
componentDidUpdate() est appelée après que le Component aie été redéssiné suite à la mise à jour du state
componentWillUnmount() est appelée lorsque le Component est sur le point d'être retiré du DOM.

###
Hooks de Contexte : TODO mais ce tuto en attendant : https://bit.ly/30wmY8p
Pour passer des props à un StackNavigator : https://bit.ly/33xA9YE

______________________________
React Navigation v.5
------------------------------
// Exemple d'intégration de React Navigation 5 à Paper : https://bit.ly/3kaRAEp

###
Installation
Package à installer : npm install @react-navigation/native @react-navigation/stack @react-navigation/drawer @react-navigation/bottom-tabs
Installation de dépendances dans un projet géré par Expo : expo install react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context @react-native-community/masked-view
Installation de dépendances dans un projet React Native complet ↓
.........................
npm install react-native-reanimated react-native-gesture-handler react-native-screens react-native-safe-area-context @react-native-community/masked-view
// si nous sommes sur Mac, installer maintenant les pods via Cocoapods avec la commande : npx pod-install ios
Ajouter cette ligne au plus haut (ligne 1) du fichier d'entrée (App.js ou index.js) : import 'react-native-gesture-handler';
Ajouter cette ligne vers le haut du fichier d'entrée : import { NavigationContainer } from '@react-navigation/native';
Encapsuler toute l'application dans cette balise : <NavigationContainer></NavigationContainer>
.........................

#####
Navigateur de pile (StackNavigator)
Importer StackNavigator : import { createStackNavigator } from '@react-navigation/stack';  //se met vers le haut du fichier d'entrée
//un StackNavigator contient un sous objet Navigator et un autre sous-objet screen, Navigator doit être dans le NavigationContainer et il contient lui même les screens.
Exemple d'implémentation dans le fichier d'entrée ↓
.........................
const Stack = createStackNavigator();
function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator initialRouteName="Home">         //Ajouter le prop initialRouteName pour définir quel écran est le premier et le prop screenOptions pour des options sur tous les screens
        <Stack.Screen name="Home" component={HomeScreen} />             //le prop component accepte seulement un composant, pas une fonction de rendu.
        <Stack.Screen name="Details" component={DetailsScreen} />       //les props name et component sont obligatoires
      </Stack.Navigator>
    </NavigationContainer>
  );
}
.........................
Personaliser un écran : <Stack.Screen name="Home" component={HomeScreen} options={{ title: 'Overview' }}/>   //change le titre d'en tête à "Overview" //liste complète d'options: https://bit.ly/31vsJlY
Naviguer vers un autre écran ↓
......................... //Dans le component de l'un de nos écrans
import { NavigationContainer } from '@react-navigation/native';
function HomeScreen({ navigation }) {     //Chaque screen dans un StackNavigator est fourni de la prop
  return (
    <View>
      <Button
        title="Go to Details"
        onPress={() => navigation.navigate('Details')}      //mettre le nom de l'écran voulu dans navigation.navigate(), ce dernier doit aussi être dans le StackNavigator
      />
    </View>
  );
}
.........................
Créer une nouvelle instance d'un écran : navigation.push('Details');   //utile pour avoir plusieurs fois le même écran
Revenir au précédent écran : navigation.goBack();     //navigate agit aussi comme goBack si l'écran existe déja
Revenir au premier écran de la pile : navigation.popToTop();

## Passage de paramètres ==============
Donner un paramètre inital à un écran : <Stack.Screen name="Details" component={DetailsScreen} initialParams={{ itemId: 42 }} /> //L'écran aura ces params de base. Les params sont fusionnés quand il en reçoit d'autres écrans.
Passer des paramètres entre les écrans ↓
.........................
    //Dans l'écran donneur appeler navigate avec un deuxième paramètre, comme cela :  navigation.navigate('RouteName', { /* params go here */ });
    //Dans l'écran receveur, lire avec route.params 
    //Exemple :
// Écran donneur
function HomeScreen({ navigation }) {
  return (
      <View>
        <Button title="Go to Details" onPress={() => {
            navigation.navigate('Details', {itemId: 86, otherParam: 'uneValeur'});
        }}
        />
      </View>
  );
}
// Écran receveur
function DetailsScreen({ route, navigation }) {
  const { itemId } = route.params;
  const { otherParam } = route.params;
  return (
    <View>
      <Text>itemId: {JSON.stringify(itemId)}</Text>
      <Text>otherParam: {JSON.stringify(otherParam)}</Text>
    </View>
  );
}
.........................
Passage de paramètres avec des navigateurs imbriqués ↓ 
.........................
// supposons que l'on a un navigateur à l'intérieur de l'Écran1
navigation.navigate('Écran1', {
  screen: 'Écran2',
  params: { user: 'jane' },
});
.........................

## Modifier en-tête de l'écran ==============
Mettre à jour le titre d'en-tête d'un écran : navigation.setOptions({ title: 'nouveauTitre' })}   //dans le component de l'écran
Remplacer le titre d'en-tête d'un écran par un élément graphique : https://bit.ly/2Xy2lac
Modifier le style de l'en-tête d'un écran : https://bit.ly/2EYs1Gu  //un peu plus bas dans la page web pour tous les écrans

## Navigateurs imbriqués ==============
Voir https://bit.ly/3gF3uEg

#####
Navigateur par onglets (Tab Navigation)
Importer Tab Navigation : import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
Exemple d'implémentation dans le fichier d'entrée ↓
.........................
const Tab = createBottomTabNavigator();
export default function App() {
  return (
    <NavigationContainer>
      <Tab.Navigator>
        <Tab.Screen name="Home" component={HomeScreen} />
        <Tab.Screen name="Settings" component={SettingsScreen} />
      </Tab.Navigator>
    </NavigationContainer>
  );
}
.........................
Modifier le style : https://bit.ly/33zeaAI
Ajouter un badge aux onglets : <Tab.Screen name="Home" component={HomeScreen} options={{ tabBarBadge: 3 }} />     //utiliser Redux pour transmettre la valeur du badge depuis un autre endroit
Sauter vers un onglet à partir d'un autre avec la programmation : navigation.navigate();
Exemple d'implémentation de StackNavigators dans des TabNavigators : https://bit.ly/2XAjkZb
Cacher le Tab Navigator dans un écran spécifique :  https://bit.ly/30zt7kr

#####
Navigateur par tiroir (Drawer Navigation)
Importer un DrawerNavigator : import { createDrawerNavigator } from '@react-navigation/drawer'
Exemple d'implémentation dans le fichier d'entrée ↓
.........................
const Drawer = createDrawerNavigator();
export default function App() {
  return (
    <NavigationContainer>
      <Drawer.Navigator initialRouteName="Home">
        <Drawer.Screen name="Home" component={HomeScreen} />
        <Drawer.Screen name="Notifications" component={NotificationsScreen} />
      </Drawer.Navigator>
    </NavigationContainer>
  );
}
.........................
Ouvrir le tiroir avec la programmation : navigation.openDrawer();
Fermer le tiroir avec la programmation : navigation.closeDrawer();
Basculer le tiroir en ouvert/fermé avec la programmation : navigation.toggleDrawer();
Déterminer si le tiroir est ouvert ou fermé : useIsDrawerOpen();  //retourne un booleen // il faut en premier import { useIsDrawerOpen } from '@react-navigation/drawer';

#####
Zone sure (SafeArea)
Ne pas utiliser le SafeAreaView Basique de React Native. Plutôt suivre les instructions ici : 

#####
Autre
Empêcher de revenir en arrière : https://bit.ly/3gNvwxD

______________________________
Redux v.7.x
------------------------------
Installer Redux : npm install --save redux react-redux
Voir le reste demain : 
https://redux.js.org/tutorials/essentials/part-1-overview-concepts
https://www.taniarascia.com/redux-react-guide/
https://react-redux.js.org/introduction/basic-tutorial
https://openclassrooms.com/fr/courses/4902061-developpez-une-application-mobile-react-native/5046316-integrez-redux-dans-votre-application
https://daveceddia.com/redux-tutorial/